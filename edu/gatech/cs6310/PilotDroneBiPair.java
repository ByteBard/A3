package edu.gatech.cs6310;import java.util.HashMap;import java.util.TreeMap;public class PilotDroneBiPair {    private TreeMap<String, Drone> pilotToDrone;    private TreeMap<String, Pilot> droneToPilot;    public PilotDroneBiPair() {        this.pilotToDrone = new TreeMap<>();        this.droneToPilot = new TreeMap<>();    }    public TreeMap<String, Drone> getPilotToDrone() {        return pilotToDrone;    }    public void setPilotToDrone(TreeMap<String, Drone> pilotToDrone) {        this.pilotToDrone = pilotToDrone;    }    public TreeMap<String, Pilot> getDroneToPilot() {        return droneToPilot;    }    public void setDroneToPilot(TreeMap<String, Pilot> droneToPilot) {        this.droneToPilot = droneToPilot;    }    /*        pilotToDrone:        pilotA -> droneX        pilotB -> droneY        droneToPilot:        droneX -> pilotA        droneY -> pilotB        Assign pilotA to droneY:        check if pilotAccToBeAssigned (pilotA) exist in pilotToDrone        pilotA exist in pilotToDrone        get the current drone already assigned (droneX)        if the current assigned droneID (droneX) != droneIDToBeAssigned (droneY)        (note: implication is the pilotID will be different too!)        then:        1. update pilotToDrone with new drone:            pilotToDrone:            pilotA -> droneY            pilotB -> droneY        2. find the current pilot (pilotB) paired with to be assigned drone (droneY) and remove (pilotB) from pilotToDrone:            pilotToDrone:            pilotA -> droneY        3. remove current assigned drone (droneX) from droneToPilot based on note implication            droneToPilot:            droneY -> pilotB        4. update current droneToPilot with new assigned pilotID            droneToPilot:            droneY -> pilotA            Final State:            pilotToDrone:            pilotA -> droneY            droneToPilot:            droneY -> pilotA        Assign pilotC to droneX:        pilotToDrone:        pilotA -> droneX        pilotB -> droneY        droneToPilot:        droneX -> pilotA        droneY -> pilotB        check if pilotAccToBeAssigned (pilotC) exist in pilotToDrone        pilotC not exist in pilotToDrone        check droneX exist in droneToPilot        droneX exist, then get matched pilot for droneX, which is pilotA        1. add pilotToDrone pilotC -> droneX        pilotToDrone:        pilotA -> droneX        pilotB -> droneY        pilotC -> droneX        2. remove pilotA from pilotToDrone (based on note implication)        pilotToDrone:        pilotB -> droneY        pilotC -> droneX        3. update droneX pair in droneToPilot        droneToPilot:        droneX -> pilotC        droneY -> pilotB        Final State:        pilotToDrone:        pilotB -> droneY        pilotC -> droneX        droneToPilot:        droneX -> pilotC        droneY -> pilotB     */    public void updateBiPair(Pilot pilotToBeAssigned, Drone droneToBeAssigned) {        String pilotAccToBeAssigned = pilotToBeAssigned.getAccount();        String droneIDToBeAssigned = droneToBeAssigned.getComboID();        Drone matchedDrone = pilotToDrone.remove(pilotAccToBeAssigned);        if(matchedDrone != null){            droneToPilot.remove(matchedDrone.getComboID());        }        Pilot matchedPilot = droneToPilot.remove(droneIDToBeAssigned);        if(matchedPilot != null){            pilotToDrone.remove(matchedPilot.getAccount());        }        pilotToDrone.put(pilotAccToBeAssigned, droneToBeAssigned);        droneToPilot.put(droneIDToBeAssigned, pilotToBeAssigned);        System.out.println(Utility.changeCompleteMsg);    }}